import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

apply plugin: 'com.android.library'

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'org.aspectj:aspectjtools:1.9.7'
    }
}

repositories {
    google()
}

dependencies {
    implementation 'org.aspectj:aspectjrt:1.9.7'
    implementation "androidx.appcompat:appcompat:1.2.0"
}

android {
    compileSdkVersion = 31

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 30
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

android.libraryVariants.all { variant ->
    JavaCompile javaCompile = variant.javaCompileProvider.get()
    javaCompile.doLast {
        def aspectPath = javaCompile.classpath.asFileTree.filter { !(it.canonicalPath.contains("play-services") && !it.canonicalPath.contains("jetified-play-services")) }.asPath
        String[] args = ["-showWeaveInfo",
                         "-1.8",
                         "-log", "${project.name}.runtime.aspect-${System.currentTimeMillis()}.log",
                         "-progress",
                         "-inpath", javaCompile.destinationDir.toString(),
                         "-aspectpath", aspectPath,
                         "-d", javaCompile.destinationDir.toString(),
                         "-classpath", javaCompile.classpath.asPath]

        println("***** ajc...")
        MessageHandler handler = new MessageHandler(true);
        new Main().run(args, handler)
        println("... Done *****")

        def log = project.logger
        for (IMessage message : handler.getMessages(null, true)) {
            switch (message.getKind()) {
                case IMessage.ABORT:
                case IMessage.ERROR:
                case IMessage.FAIL:
                    log.error message.message, message.thrown
                    break;
                case IMessage.WARNING:
                case IMessage.INFO:
                    log.error message.message, message.thrown
                    break;
                case IMessage.DEBUG:
                    log.debug message.message, message.thrown
                    break;
            }
        }
    }
}

group = GROUP
version = VERSION_NAME

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}